1.Develop a C program to create a new process. Print the child process ID and parent process ID in both processes.

Code:
#include <stdio.h>
#include <sys/types.h>
#include <unistd.h>
int main() {
    pid_t pid;
    // Create a child process
    pid = fork();
    if (pid < 0) { // Error occurred
        fprintf(stderr, "Fork Failed");
        return 1;
    } else if (pid == 0) { // Child process
        printf("I am the child, my pid is: %d\n", getpid());
        printf("My parent's pid is: %d\n", getppid());
    } else { // Parent process
        printf("I am the parent, my pid is: %d\n", getpid());
        printf("My child's pid is: %d\n", pid);
    }
    return 0;
}
2. Develop a C program to perform 2x2 matrix addition in child process and determine whether the given number is prime or not in parent process.  

Code:
#include <stdio.h>
#include <sys/types.h>
#include <unistd.h>
// Function to check if a number is prime
int isPrime(int num) {
    if (num <= 1) return 0;
    if (num <= 3) return 1;
    if (num % 2 == 0 || num % 3 == 0) return 0;
    for (int i = 5; i * i <= num; i = i + 6)
        if (num % i == 0 || num % (i + 2) == 0)
            return 0;
    return 1;
}
// Function to add two 2x2 matrices
void addMatrices(int a[2][2], int b[2][2], int result[2][2]) {
    for (int i = 0; i < 2; i++)
        for (int j = 0; j < 2; j++)
            result[i][j] = a[i][j] + b[i][j];
}
int main() {
    pid_t pid;
    // Create a child process
    pid = fork();
    if (pid < 0) { // Error occurred
        fprintf(stderr, "Fork Failed");
        return 1;
    } else if (pid == 0) { // Child process
        int a[2][2] = {{1, 2}, {3, 4}};
        int b[2][2] = {{5, 6}, {7, 8}};
        int result[2][2];
        addMatrices(a, b, result);

        printf("Matrix addition result:\n");
        for (int i = 0; i < 2; i++) {
            for (int j = 0; j < 2; j++)
                printf("%d ", result[i][j]);
            printf("\n");
        }
    } else { // Parent process
        int num = 29;
        if (isPrime(num))
            printf("%d is a prime number.\n", num);
        else
            printf("%d is not a prime number.\n", num);
    }
    return 0;
}
#include <stdio.h>
#include <unistd.h>
int main() {
    pid_t p1, p2, p3, p4, p5;
    p1 = fork();
    if (p1 == 0) {
        printf("I am P2, my pid is: %d, my parent's pid is: %d\n", getpid(), getppid());
    } else {
        p2 = fork();
        if (p2 == 0) {
            printf("I am P3, my pid is: %d, my parent's pid is: %d\n", getpid(), getppid());
            p3 = fork();
            if (p3 == 0) {
                printf("I am P4, my pid is: %d, my parent's pid is: %d\n", getpid(), getppid());
            } else {
                p4 = fork();

                if (p4 == 0) {
                    printf("I am P5, my pid is: %d, my parent's pid is: %d\n", getpid(), getppid());
                }
            }
        }
    }
    // Parent process waits for all child processes to finish
    for (int i = 0; i < 4; i++)
        wait(NULL);
    return 0;
}

4. Develop a C program to demonstrate Zombie process.
Code:

#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <unistd.h>

int main() {
    pid_t child_pid = fork();

    if (child_pid > 0) {
       
        printf("Parent process is running\n");
        sleep(10);
    } else if (child_pid == 0) {
       
        printf("Child process is running and exiting\n");
        exit(0);
    } else {
        
        perror("fork");
        exit(1);
    }

    return 0;
}
5. Develop a C program to demonstrate Orphan process.
Code:

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

int main() {
    pid_t pid = fork();

    if (pid < 0) {
       
        perror("Fork failed");
        exit(EXIT_FAILURE);
    } else if (pid == 0) {
    
        printf("Child process with PID: %d\n", getpid());
        sleep(2); 
        printf("Child process completed\n");
    } else {
        
        printf("Parent process with PID: %d\n", getpid());
        printf("Parent process exiting\n");
        exit(EXIT_SUCCESS);
    }

    return 0;
}

6. Develop a C program to create three threads. Perform 2x2 matrix addition in thread1, Check whether the given number is prime or not in thread2 and print the average of n numbers in thread 3.
Code:

#include <stdio.h>
#include <pthread.h>

// Global variables for sharing data between threads
int matrix1[2][2] = {{2, 2}, {4, 4}};
int matrix2[2][2] = {{4, 6}, {9, 8}};
int isPrimeNumber = 7;
int numbers[] = {10, 20, 30, 40, 50};
int n = 5;

// Function to check if a number is prime
void *checkPrime(void *arg) {
    int num = *(int *)arg;
    int flag = 0;
    
    for (int i = 2; i <= num / 2; i++) {
        if (num % i == 0) {
            flag = 1;
            break;
        }
    }
    
    if (flag == 0) {
       
        printf("%d is a prime number.\n", num);
    } else {
        printf("%d is not a prime number.\n", num);
    }
    
    pthread_exit(NULL);
}

// Function to calculate the average of numbers
void *calculateAverage(void *arg) {
    int sum = 0;
    for (int i = 0; i < n; i++) {
        sum += numbers[i];
    }
    
    float average = (float)sum / n;
    printf("Average of the numbers is: %.2f\n", average);
    
    pthread_exit(NULL);
}

// Function to perform matrix addition
void *matrixAddition(void *arg) {
    int result[2][2];
    
    for (int i = 0; i < 2; i++) {
        for (int j = 0; j < 2; j++) {
            result[i][j] = matrix1[i][j] + matrix2[i][j];
        }
    }
    
    
    printf("Matrix Addition Result:\n");
    for (int i = 0; i < 2; i++) {
        for (int j = 0; j < 2; j++) {
            printf("%d ", result[i][j]);
        }
        printf("\n");
        
    }
    
    pthread_exit(NULL);
}

int main() {
    pthread_t thread1, thread2, thread3;
    
    // Create threads for each task
    pthread_create(&thread1, NULL, matrixAddition, NULL);
    pthread_create(&thread2, NULL, checkPrime, (void *)&isPrimeNumber);
    pthread_create(&thread3, NULL, calculateAverage, NULL);
    
    // Wait for all threads to finish
    pthread_join(thread1, NULL);
    pthread_join(thread2, NULL);
    pthread_join(thread3, NULL);
    
    return 0;
}

FCFS

#include<stdio.h>

int main(){

int  bt[10]={0},at[10]={0},tat[10]={0},wt[10]={0},ct[10]={0};
int n,sum=0; int p[10];
float totalTAT=0,totalWT=0;

printf("Enter number of processes	"); scanf("%d",&n);
for(int i=0;i<n;i++){
p[i]=i+1;
}
printf("Enter arrival time and burst time for each process\n\n");

for(int i=0;i<n;i++)
{

printf("Arrival time of process[%d]	",i+1); scanf("%d",&at[i]);

printf("Burst time of process[%d]	",i+1); scanf("%d",&bt[i]);
 
printf("\n");
}
for(int i=0;i<n;i++){
for(int j=i+1;j<n;j++){
if(at[i]>at[j]){
int temp1=at[j]; at[j]=at[i]; at[i]=temp1;
int temp2=bt[j]; bt[j]=bt[i]; bt[i]=temp2;
int temp3=p[j]; p[j]=p[i]; p[i]=temp3;
}
}
}


for(int j=0;j<n;j++)
{
sum+=bt[j]; ct[j]=sum;
}

for(int k=0;k<n;k++)
{
tat[k]=ct[k]-at[k]; totalTAT+=tat[k];
}

for(int k=0;k<n;k++)
{
wt[k]=tat[k]-bt[k]; totalWT+=wt[k];
}
 
printf("Solution: \n\n");
printf("P#\t AT\t BT\t CT\t TAT\t WT\t\n\n");

for(int i=0;i<n;i++)
{
printf("P%d\t %d\t %d\t %d\t %d\t %d\n",p[i],at[i],bt[i],ct[i],tat[i],wt[i]);
}

printf("\n\nAverage Turnaround Time = %f\n",totalTAT/n);
printf("Average WT = %f\n\n",totalWT/n);

return 0;
}
#include <stdio.h>
#include <stdlib.h>

void swap(int *x, int *y)
{
    int temp=*x;
    *x=*y;
    *y=temp;
}
void sortat(int p[], int at[], int bt[], int n)
{
  int i, j;
  for(i=0;i<n;i++)
  {
      for(j=i+1;j<n;j++)
      {   
	  if(at[i]>at[j])
	  {
	        swap(&p[i], &p[j]);
		swap(&at[i], &at[j]);
		swap(&bt[i], &bt[j]);
	   }
           
	   else if(at[i]==at[j])
	   {
	      if(bt[i]>bt[j])
                 swap(&p[i], &p[j]);
                 swap(&at[i], &at[j]);
                 swap(&bt[i], &bt[j]);
	   }
       }
  }
}

void tatwt( int ct[], int at[], int bt[], int tat[], int wt[], int n)
{
   int i;
   for(i=0;i<n;i++)
   {
	tat[i]=ct[i]-at[i];
	wt[i]=tat[i]-bt[i];
   }
}
int main()
{
  int *p, *at, *bt, *tat, *wt, *ct, pos, i, j, min=1000, n;
  float awt=0, atat=0;
  printf("\nenter the number of process:\n");
  scanf("%d", &n);
  p=(int*)malloc(n*sizeof(int));
  at=(int*)malloc(n*sizeof(int));
  bt=(int*)malloc(n*sizeof(int));
  ct=(int*)malloc(n*sizeof(int));
  wt=(int*)malloc(n*sizeof(int));
  tat=(int*)malloc(n*sizeof(int));
  printf("enter the process:\n");
  for(i=0;i<n;i++)
  {
	scanf("%d",&p[i]);
  }
  printf("enter the arrival time:\n");
  for(i=0;i<n;i++)
  {
	scanf("%d",&at[i]);
  }
  printf("enter the burst time:\n");
  for(i=0;i<n;i++)
  {
	scanf("%d",&bt[i]);
  }
  sortat(p, at, bt, n);
  ct[0]=at[0] + bt[0];
  for(i=1; i<n; i++)
  {
	for(j=i; j<n; j++)
	{
	    if(at[j]<=ct[i-1])
	   {
              if(bt[j]<min)
              {
                 min=bt[j];
                 pos=j;
              }
	   }
	}
   
    swap(&p[i], &p[pos]);
    swap(&at[i], &at[pos]);
    swap(&bt[i], &bt[pos]);
    min=1000;
    ct[i]=ct[i-1]+bt[i];
  }
  tatwt(ct, at, bt, tat, wt, n);
  printf("\np\t at\t bt\t ct\t tat\t wt");
  for(i=0;i<n;i++)
  {
    printf("\n%d\t %d\t %d\t %d\t %d\t %d",p[i], at[i], bt[i], ct[i], tat[i], wt[i]);
  }
  for(i=0;i<n;i++)
  {
    atat+=tat[i];
    awt+=wt[i];
  }
  
  atat=atat/n;
  awt=awt/n;
  printf("\n avg tat=%.2f and avg wt=%.2f \n",atat, awt);
  return 0;
}

Peterson:
#include <stdio.h>
#include <pthread.h>
#include <unistd.h>
#define NUM_THREADS 2
int turn = 0;
int flag[2] = {0};
int critical_section_var = 0;
void lock(int self) {
flag[self] = 1;
turn = 1 - self;
while (flag[1 - self] == 1 && turn == 1 - self)
;
}
void unlock(int self) {
flag[self] = 0;
}
void* process(void* arg) {
int self = (int)arg;
int other = 1 - self;
for (int i = 0; i < 5; i++) {
lock(self);
critical_section_var++;
printf("Thread %d in Critical Section. Critical Section Variable: %d\n", self, critical_section_var);
unlock(self);
usleep(100000); }
pthread_exit(NULL);
}
int main() {
pthread_t threads[NUM_THREADS];
int thread_ids[NUM_THREADS] = {0, 1};
for (int i = 0; i < NUM_THREADS; i++) {
pthread_create(&threads[i], NULL, process, &thread_ids[i]);
}
for (int i = 0; i < NUM_THREADS; i++) {
pthread_join(threads[i], NULL);
}
return 0;
}
b.Dining Philosopher 
To avoid deadlocks and ensure that each philosopher can pick up both chopsticks (resources) to eat.
Pseudocode:
Initialize semaphores for each chopstick (e.g., chopstick[0], chopstick[1], ..., chopstick[4])
Initialize a semaphore for the room (e.g., room)
Philosopher(i):
    while true:
        wait(room)  // Wait for a seat in the dining room
        wait(chopstick[i])
        wait(chopstick[(i + 1) % 5])
        Eat
        signal(chopstick[(i + 1) % 5])
        signal(chopstick[i])
        signal(room)

Main:
    Create threads for each philosopher (Philosopher(0), Philosopher(1), ..., Philosopher(4))
    Join all threads

C program:
#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>

sem_t room;
sem_t chopstick[5];

void *philosopher(void *num) {
    int phil = *(int *)num;
    sem_wait(&room);
    printf("\nPhilosopher %d has entered room\n", phil);
    sem_wait(&chopstick[phil]);
    sem_wait(&chopstick[(phil + 1) % 5]);
    printf("\nPhilosopher %d is eating\n", phil);
    sleep(2);
    printf("\nPhilosopher %d has finished eating\n", phil);
    sem_post(&chopstick[(phil + 1) % 5]);
    sem_post(&chopstick[phil]);
    sem_post(&room);
}
int main() {
    int i, a[5];
    pthread_t tid[5];
    sem_init(&room, 0, 4);
    for (i = 0; i < 5; i++)
        sem_init(&chopstick[i], 0, 1);
    for (i = 0; i < 5; i++) {
        a[i] = i;
        pthread_create(&tid[i], NULL, philosopher, (void *)&a[i]);
    }
    for (i = 0; i < 5; i++) {
        pthread_join(tid[i], NULL);
    }
}

FIFO
#include <stdio.h>
#define MAX_FRAMES 3
#define MAX_PAGES 11
int main() {
int pages[MAX_PAGES] = {2, 3, 4, 2, 5, 7, 7, 1, 4, 3, 5};
int frames[MAX_FRAMES] = {-1, -1, -1}; // -1 indicates empty frame
int fifo_index = 0, page_faults = 0, hits = 0;
int i, j, found;
printf("FIFO Algorithm:\n");
for (i = 0; i < MAX_PAGES; i++) {
found = 0;
for (j = 0; j < MAX_FRAMES; j++) {
if (frames[j] == pages[i]) {
found = 1;
hits++;
break;
}
}
if (!found) {
frames[fifo_index] = pages[i];
fifo_index = (fifo_index + 1) % MAX_FRAMES;
page_faults++;
printf("Page %d is loaded into frame %d\n", pages[i], (fifo_index - 1 + MAX_FRAMES) % MAX_FRAMES);
}
}
printf("Total Page Faults: %d\n", page_faults);
printf("Hit Ratio: %.2f\n", (float)hits / MAX_PAGES);
printf("Miss Ratio: %.2f\n", 1 - (float)hits / MAX_PAGES);
return 0;
}

LRU
#include <stdio.h>
#define MAX_FRAMES 3
#define MAX_PAGES 11
int main() {
int pages[MAX_PAGES] = {2, 3, 4, 2, 5, 7, 7, 1, 4, 3, 5};
int frames[MAX_FRAMES] = {-1, -1, -1}; // -1 indicates empty frame
int lru[MAX_FRAMES] = {0, 0, 0}; // to store order of page arrival
int page_faults = 0, hits = 0, lru_index, i, j, found;

printf("LRU Algorithm:\n");
for (i = 0; i < MAX_PAGES; i++) {
found = 0;
for (j = 0; j < MAX_FRAMES; j++) {
if (frames[j] == pages[i]) {
found = 1;
lru[j] = i;
hits++;
break;
}
}
if (!found) {
lru_index = 0;
for (j = 1; j < MAX_FRAMES; j++) {
if (lru[j] < lru[lru_index]) {
lru_index = j;
}
}
frames[lru_index] = pages[i];
lru[lru_index] = i;
page_faults++;
printf("Page %d is loaded into frame %d\n", pages[i], lru_index);
}
}
printf("Total Page Faults: %d\n", page_faults);
printf("Hit Ratio: %.2f\n", (float)hits / MAX_PAGES);
printf("Miss Ratio: %.2f\n", 1 - (float)hits / MAX_PAGES);
return 0;
}

First Fit:
#include<stdio.h>
 
void main()
{
int bsize[10], psize[10], bno, pno, flags[10], allocation[10], i, j;
 
for(i = 0; i < 10; i++)
{
flags[i] = 0;
allocation[i] = -1;
}
printf("Enter no. of blocks: ");
scanf("%d", &bno);
printf("\nEnter size of each block: ");
for(i = 0; i < bno; i++)
scanf("%d", &bsize[i]);
 
printf("\nEnter no. of processes: ");
scanf("%d", &pno);
printf("\nEnter size of each process: ");
for(i = 0; i < pno; i++)
scanf("%d", &psize[i]);
for(i = 0; i < pno; i++)         //allocation as per first fit
for(j = 0; j < bno; j++)
if(flags[j] == 0 && bsize[j] >= psize[i])
{
allocation[j] = i;
flags[j] = 1;
break;
}
//display allocation details
printf("\nBlock no.\tsize\t\tprocess no.\t\tsize");
for(i = 0; i < bno; i++)
{
printf("\n%d\t\t%d\t\t", i+1, bsize[i]);
if(flags[i] == 1)
printf("%d\t\t\t%d",allocation[i]+1,psize[allocation[i]]);
else
printf("Not allocated");
}
}
bEST fIT:
#include <stdio.h>

// Method to allocate memory to blocks as per Best fit algorithm
void bestFit(int blockSize[], int m, int processSize[], int n) {
    // Stores block id of the block allocated to a process
    int allocation[n];

    // Initially no block is assigned to any process
    for (int i = 0; i < n; i++)
        allocation[i] = -1;

    // pick each process and find suitable blocks
    // according to its size and assign to it
    for (int i = 0; i < n; i++) {
        // Find the best fit block for current process
        int bestIdx = -1;
        for (int j = 0; j < m; j++) {
            if (blockSize[j] >= processSize[i]) {
                if (bestIdx == -1)
                    bestIdx = j;
                else if (blockSize[bestIdx] > blockSize[j])
                    bestIdx = j;
            }
        }

        // If we could find a block for current process
        if (bestIdx != -1) {
            // allocate block j to p[i] process
            allocation[i] = bestIdx;

            // Reduce available memory in this block.
            blockSize[bestIdx] -= processSize[i];
        }
    }

    printf("\nProcess No.\tProcess Size\tBlock no.\n");
    for (int i = 0; i < n; i++) {
        printf(" %d\t\t          %d\t\t", i + 1, processSize[i]);
        if (allocation[i] != -1)
            printf("  %d  ", allocation[i] + 1);
        else
            printf("Not Allocated");
        printf("\n");
    }
}

// Driver Method
int main() {
    int blockSize[] = {100, 500, 200, 300, 600};
    int processSize[] = {212, 417, 112, 426};
    int m = sizeof(blockSize) / sizeof(blockSize[0]);
    int n = sizeof(processSize) / sizeof(processSize[0]);

    bestFit(blockSize, m, processSize, n);

    return 0;
}

